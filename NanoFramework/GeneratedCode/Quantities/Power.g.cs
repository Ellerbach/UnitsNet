//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In physics, power is the rate of doing work. It is equivalent to an amount of energy consumed per unit time.
    /// </summary>
    public struct  Power
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly decimal _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PowerUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public decimal Value => _value;

        /// <inheritdoc />
        public PowerUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Power(decimal value, PowerUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static PowerUnit BaseUnit { get; } = PowerUnit.Watt;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Power MaxValue { get; } = new Power(79228162514264337593543950335M, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Power MinValue { get; } = new Power(-79228162514264337593543950335M, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Power Zero { get; } = new Power(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get Power in BoilerHorsepower.
        /// </summary>
        public decimal BoilerHorsepower => As(PowerUnit.BoilerHorsepower);

        /// <summary>
        ///     Get Power in BritishThermalUnitsPerHour.
        /// </summary>
        public decimal BritishThermalUnitsPerHour => As(PowerUnit.BritishThermalUnitPerHour);

        /// <summary>
        ///     Get Power in Decawatts.
        /// </summary>
        public decimal Decawatts => As(PowerUnit.Decawatt);

        /// <summary>
        ///     Get Power in Deciwatts.
        /// </summary>
        public decimal Deciwatts => As(PowerUnit.Deciwatt);

        /// <summary>
        ///     Get Power in ElectricalHorsepower.
        /// </summary>
        public decimal ElectricalHorsepower => As(PowerUnit.ElectricalHorsepower);

        /// <summary>
        ///     Get Power in Femtowatts.
        /// </summary>
        public decimal Femtowatts => As(PowerUnit.Femtowatt);

        /// <summary>
        ///     Get Power in GigajoulesPerHour.
        /// </summary>
        public decimal GigajoulesPerHour => As(PowerUnit.GigajoulePerHour);

        /// <summary>
        ///     Get Power in Gigawatts.
        /// </summary>
        public decimal Gigawatts => As(PowerUnit.Gigawatt);

        /// <summary>
        ///     Get Power in HydraulicHorsepower.
        /// </summary>
        public decimal HydraulicHorsepower => As(PowerUnit.HydraulicHorsepower);

        /// <summary>
        ///     Get Power in JoulesPerHour.
        /// </summary>
        public decimal JoulesPerHour => As(PowerUnit.JoulePerHour);

        /// <summary>
        ///     Get Power in KilobritishThermalUnitsPerHour.
        /// </summary>
        public decimal KilobritishThermalUnitsPerHour => As(PowerUnit.KilobritishThermalUnitPerHour);

        /// <summary>
        ///     Get Power in KilojoulesPerHour.
        /// </summary>
        public decimal KilojoulesPerHour => As(PowerUnit.KilojoulePerHour);

        /// <summary>
        ///     Get Power in Kilowatts.
        /// </summary>
        public decimal Kilowatts => As(PowerUnit.Kilowatt);

        /// <summary>
        ///     Get Power in MechanicalHorsepower.
        /// </summary>
        public decimal MechanicalHorsepower => As(PowerUnit.MechanicalHorsepower);

        /// <summary>
        ///     Get Power in MegajoulesPerHour.
        /// </summary>
        public decimal MegajoulesPerHour => As(PowerUnit.MegajoulePerHour);

        /// <summary>
        ///     Get Power in Megawatts.
        /// </summary>
        public decimal Megawatts => As(PowerUnit.Megawatt);

        /// <summary>
        ///     Get Power in MetricHorsepower.
        /// </summary>
        public decimal MetricHorsepower => As(PowerUnit.MetricHorsepower);

        /// <summary>
        ///     Get Power in Microwatts.
        /// </summary>
        public decimal Microwatts => As(PowerUnit.Microwatt);

        /// <summary>
        ///     Get Power in MillijoulesPerHour.
        /// </summary>
        public decimal MillijoulesPerHour => As(PowerUnit.MillijoulePerHour);

        /// <summary>
        ///     Get Power in Milliwatts.
        /// </summary>
        public decimal Milliwatts => As(PowerUnit.Milliwatt);

        /// <summary>
        ///     Get Power in Nanowatts.
        /// </summary>
        public decimal Nanowatts => As(PowerUnit.Nanowatt);

        /// <summary>
        ///     Get Power in Petawatts.
        /// </summary>
        public decimal Petawatts => As(PowerUnit.Petawatt);

        /// <summary>
        ///     Get Power in Picowatts.
        /// </summary>
        public decimal Picowatts => As(PowerUnit.Picowatt);

        /// <summary>
        ///     Get Power in Terawatts.
        /// </summary>
        public decimal Terawatts => As(PowerUnit.Terawatt);

        /// <summary>
        ///     Get Power in Watts.
        /// </summary>
        public decimal Watts => As(PowerUnit.Watt);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Power from BoilerHorsepower.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromBoilerHorsepower(decimal boilerhorsepower) => new Power(boilerhorsepower, PowerUnit.BoilerHorsepower);

        /// <summary>
        ///     Get Power from BritishThermalUnitsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromBritishThermalUnitsPerHour(decimal britishthermalunitsperhour) => new Power(britishthermalunitsperhour, PowerUnit.BritishThermalUnitPerHour);

        /// <summary>
        ///     Get Power from Decawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromDecawatts(decimal decawatts) => new Power(decawatts, PowerUnit.Decawatt);

        /// <summary>
        ///     Get Power from Deciwatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromDeciwatts(decimal deciwatts) => new Power(deciwatts, PowerUnit.Deciwatt);

        /// <summary>
        ///     Get Power from ElectricalHorsepower.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromElectricalHorsepower(decimal electricalhorsepower) => new Power(electricalhorsepower, PowerUnit.ElectricalHorsepower);

        /// <summary>
        ///     Get Power from Femtowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromFemtowatts(decimal femtowatts) => new Power(femtowatts, PowerUnit.Femtowatt);

        /// <summary>
        ///     Get Power from GigajoulesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromGigajoulesPerHour(decimal gigajoulesperhour) => new Power(gigajoulesperhour, PowerUnit.GigajoulePerHour);

        /// <summary>
        ///     Get Power from Gigawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromGigawatts(decimal gigawatts) => new Power(gigawatts, PowerUnit.Gigawatt);

        /// <summary>
        ///     Get Power from HydraulicHorsepower.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromHydraulicHorsepower(decimal hydraulichorsepower) => new Power(hydraulichorsepower, PowerUnit.HydraulicHorsepower);

        /// <summary>
        ///     Get Power from JoulesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromJoulesPerHour(decimal joulesperhour) => new Power(joulesperhour, PowerUnit.JoulePerHour);

        /// <summary>
        ///     Get Power from KilobritishThermalUnitsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromKilobritishThermalUnitsPerHour(decimal kilobritishthermalunitsperhour) => new Power(kilobritishthermalunitsperhour, PowerUnit.KilobritishThermalUnitPerHour);

        /// <summary>
        ///     Get Power from KilojoulesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromKilojoulesPerHour(decimal kilojoulesperhour) => new Power(kilojoulesperhour, PowerUnit.KilojoulePerHour);

        /// <summary>
        ///     Get Power from Kilowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromKilowatts(decimal kilowatts) => new Power(kilowatts, PowerUnit.Kilowatt);

        /// <summary>
        ///     Get Power from MechanicalHorsepower.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromMechanicalHorsepower(decimal mechanicalhorsepower) => new Power(mechanicalhorsepower, PowerUnit.MechanicalHorsepower);

        /// <summary>
        ///     Get Power from MegajoulesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromMegajoulesPerHour(decimal megajoulesperhour) => new Power(megajoulesperhour, PowerUnit.MegajoulePerHour);

        /// <summary>
        ///     Get Power from Megawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromMegawatts(decimal megawatts) => new Power(megawatts, PowerUnit.Megawatt);

        /// <summary>
        ///     Get Power from MetricHorsepower.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromMetricHorsepower(decimal metrichorsepower) => new Power(metrichorsepower, PowerUnit.MetricHorsepower);

        /// <summary>
        ///     Get Power from Microwatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromMicrowatts(decimal microwatts) => new Power(microwatts, PowerUnit.Microwatt);

        /// <summary>
        ///     Get Power from MillijoulesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromMillijoulesPerHour(decimal millijoulesperhour) => new Power(millijoulesperhour, PowerUnit.MillijoulePerHour);

        /// <summary>
        ///     Get Power from Milliwatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromMilliwatts(decimal milliwatts) => new Power(milliwatts, PowerUnit.Milliwatt);

        /// <summary>
        ///     Get Power from Nanowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromNanowatts(decimal nanowatts) => new Power(nanowatts, PowerUnit.Nanowatt);

        /// <summary>
        ///     Get Power from Petawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromPetawatts(decimal petawatts) => new Power(petawatts, PowerUnit.Petawatt);

        /// <summary>
        ///     Get Power from Picowatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromPicowatts(decimal picowatts) => new Power(picowatts, PowerUnit.Picowatt);

        /// <summary>
        ///     Get Power from Terawatts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromTerawatts(decimal terawatts) => new Power(terawatts, PowerUnit.Terawatt);

        /// <summary>
        ///     Get Power from Watts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Power FromWatts(decimal watts) => new Power(watts, PowerUnit.Watt);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PowerUnit" /> to <see cref="Power" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Power unit value.</returns>
        public static Power From(decimal value, PowerUnit fromUnit)
        {
            return new Power(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public decimal As(PowerUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Power ToUnit(PowerUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new Power(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private decimal GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case PowerUnit.BoilerHorsepower: return _value*9812.5m;
                case PowerUnit.BritishThermalUnitPerHour: return _value*0.293071m;
                case PowerUnit.Decawatt: return (_value) * 1e1m;
                case PowerUnit.Deciwatt: return (_value) * 1e-1m;
                case PowerUnit.ElectricalHorsepower: return _value*746m;
                case PowerUnit.Femtowatt: return (_value) * 1e-15m;
                case PowerUnit.GigajoulePerHour: return (_value/3600m) * 1e9m;
                case PowerUnit.Gigawatt: return (_value) * 1e9m;
                case PowerUnit.HydraulicHorsepower: return _value*745.69988145m;
                case PowerUnit.JoulePerHour: return _value/3600m;
                case PowerUnit.KilobritishThermalUnitPerHour: return (_value*0.293071m) * 1e3m;
                case PowerUnit.KilojoulePerHour: return (_value/3600m) * 1e3m;
                case PowerUnit.Kilowatt: return (_value) * 1e3m;
                case PowerUnit.MechanicalHorsepower: return _value*745.69m;
                case PowerUnit.MegajoulePerHour: return (_value/3600m) * 1e6m;
                case PowerUnit.Megawatt: return (_value) * 1e6m;
                case PowerUnit.MetricHorsepower: return _value*735.49875m;
                case PowerUnit.Microwatt: return (_value) * 1e-6m;
                case PowerUnit.MillijoulePerHour: return (_value/3600m) * 1e-3m;
                case PowerUnit.Milliwatt: return (_value) * 1e-3m;
                case PowerUnit.Nanowatt: return (_value) * 1e-9m;
                case PowerUnit.Petawatt: return (_value) * 1e15m;
                case PowerUnit.Picowatt: return (_value) * 1e-12m;
                case PowerUnit.Terawatt: return (_value) * 1e12m;
                case PowerUnit.Watt: return _value;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private decimal GetValueAs(PowerUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case PowerUnit.BoilerHorsepower: return baseUnitValue/9812.5m;
                case PowerUnit.BritishThermalUnitPerHour: return baseUnitValue/0.293071m;
                case PowerUnit.Decawatt: return (baseUnitValue) / 1e1m;
                case PowerUnit.Deciwatt: return (baseUnitValue) / 1e-1m;
                case PowerUnit.ElectricalHorsepower: return baseUnitValue/746m;
                case PowerUnit.Femtowatt: return (baseUnitValue) / 1e-15m;
                case PowerUnit.GigajoulePerHour: return (baseUnitValue*3600m) / 1e9m;
                case PowerUnit.Gigawatt: return (baseUnitValue) / 1e9m;
                case PowerUnit.HydraulicHorsepower: return baseUnitValue/745.69988145m;
                case PowerUnit.JoulePerHour: return baseUnitValue*3600m;
                case PowerUnit.KilobritishThermalUnitPerHour: return (baseUnitValue/0.293071m) / 1e3m;
                case PowerUnit.KilojoulePerHour: return (baseUnitValue*3600m) / 1e3m;
                case PowerUnit.Kilowatt: return (baseUnitValue) / 1e3m;
                case PowerUnit.MechanicalHorsepower: return baseUnitValue/745.69m;
                case PowerUnit.MegajoulePerHour: return (baseUnitValue*3600m) / 1e6m;
                case PowerUnit.Megawatt: return (baseUnitValue) / 1e6m;
                case PowerUnit.MetricHorsepower: return baseUnitValue/735.49875m;
                case PowerUnit.Microwatt: return (baseUnitValue) / 1e-6m;
                case PowerUnit.MillijoulePerHour: return (baseUnitValue*3600m) / 1e-3m;
                case PowerUnit.Milliwatt: return (baseUnitValue) / 1e-3m;
                case PowerUnit.Nanowatt: return (baseUnitValue) / 1e-9m;
                case PowerUnit.Petawatt: return (baseUnitValue) / 1e15m;
                case PowerUnit.Picowatt: return (baseUnitValue) / 1e-12m;
                case PowerUnit.Terawatt: return (baseUnitValue) / 1e12m;
                case PowerUnit.Watt: return baseUnitValue;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

